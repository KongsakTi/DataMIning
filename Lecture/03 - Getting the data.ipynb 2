{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lecture 3: Getting the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 1. Reading text file\n",
    "\n",
    "The first step to working with a text file is to obtain a *file* object using open: \n",
    "``` python\n",
    "# 'r' means read-only\n",
    "file_for_reading = open('reading_file.txt', 'r')\n",
    "\n",
    "# 'w' is write -- will destroy the file if it already exists!\n",
    "file_for_writing = open('writing_file.txt', 'w')\n",
    "\n",
    "# 'a' is append -- for adding to the end of the file\n",
    "file_for_appending = open('appending_file.txt', 'a') \n",
    "\n",
    "# don't forget to close your files when you're done\n",
    "file_for_writing.close()\n",
    "```\n",
    "Because it is easy to forget to close your files, you should always use them in a *with* block, at the end of which they will be closed automatically:\n",
    "\n",
    "``` python\n",
    "with open(filename,'r') as f:\n",
    "    data = function_that_gets_data_from(f)\n",
    "\n",
    "# at this point f has already been closed, so don't try to use it\n",
    "process(data)\n",
    "```\n",
    "\n",
    "Sometimes the file you are working with is too big and doesn't fit in memory. You can work *data stream* instead by  iterating over the lines of the file using *for*:\n",
    "\n",
    "``` python\n",
    "starts_with_hash = 0\n",
    "with open('input.txt','r') as f: \n",
    "    # look at each line in the file\n",
    "    for line in file:\n",
    "        # use a regex to see if it starts with '#'\n",
    "        if re.match(\"^#\",line): \n",
    "            # if it does, add 1 to the count\n",
    "            starts_with_hash += 1\n",
    "```\n",
    "            \n",
    "    \n",
    "Every line you get this way ends in a newline character, so youâ€™ll often want to *strip()* it before doing anything with it.\n",
    "\n",
    "For example, imagine you have a file full of email addresses, one per line, and that you need to generate a histogram of the domains. The rules for correctly extracting domains are somewhat subtle (e.g., the Public Suffix List), but a good first approximation is to just take the parts of the email addresses that come after the @. (Which gives the wrong answer for email addresses like joel@mail.datasciencester.com.)\n",
    "\n",
    "``` python\n",
    "def get_domain(email_address):\n",
    "    \"\"\"split on '@' and return the last piece\"\"\" \n",
    "    return email_address.lower().split(\"@\")[-1]\n",
    "\n",
    "with open('email_addresses.txt', 'r') as f: \n",
    "    domain_counts = Counter(get_domain(line.strip()) for line in f if \"@\" in line)\n",
    "```\n",
    "\n",
    "*Source: Joel Grus, Data Science from Scratch First Principles with Python*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 2: Working with delimited files\n",
    "\n",
    "I recommend using pandas for handling CSV, TSV, XLSX files.\n",
    "\n",
    "\n",
    "### Load a csv\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv')\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>Unnamed: 0</th>\n",
    "      <th>first_name</th>\n",
    "      <th>last_name</th>\n",
    "      <th>age</th>\n",
    "      <th>preTestScore</th>\n",
    "      <th>postTestScore</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>0</td>\n",
    "      <td>Jason</td>\n",
    "      <td>Miller</td>\n",
    "      <td>42</td>\n",
    "      <td>4</td>\n",
    "      <td>25,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>1</td>\n",
    "      <td>Molly</td>\n",
    "      <td>Jacobson</td>\n",
    "      <td>52</td>\n",
    "      <td>24</td>\n",
    "      <td>94,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2</th>\n",
    "      <td>2</td>\n",
    "      <td>Tina</td>\n",
    "      <td>.</td>\n",
    "      <td>36</td>\n",
    "      <td>31</td>\n",
    "      <td>57</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3</th>\n",
    "      <td>3</td>\n",
    "      <td>Jake</td>\n",
    "      <td>Milner</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4</th>\n",
    "      <td>4</td>\n",
    "      <td>Amy</td>\n",
    "      <td>Cooze</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv with no headers\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', header=None)\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>0</th>\n",
    "      <th>1</th>\n",
    "      <th>2</th>\n",
    "      <th>3</th>\n",
    "      <th>4</th>\n",
    "      <th>5</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>NaN</td>\n",
    "      <td>first_name</td>\n",
    "      <td>last_name</td>\n",
    "      <td>age</td>\n",
    "      <td>preTestScore</td>\n",
    "      <td>postTestScore</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>0.0</td>\n",
    "      <td>Jason</td>\n",
    "      <td>Miller</td>\n",
    "      <td>42</td>\n",
    "      <td>4</td>\n",
    "      <td>25,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2</th>\n",
    "      <td>1.0</td>\n",
    "      <td>Molly</td>\n",
    "      <td>Jacobson</td>\n",
    "      <td>52</td>\n",
    "      <td>24</td>\n",
    "      <td>94,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3</th>\n",
    "      <td>2.0</td>\n",
    "      <td>Tina</td>\n",
    "      <td>.</td>\n",
    "      <td>36</td>\n",
    "      <td>31</td>\n",
    "      <td>57</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4</th>\n",
    "      <td>3.0</td>\n",
    "      <td>Jake</td>\n",
    "      <td>Milner</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>5</th>\n",
    "      <td>4.0</td>\n",
    "      <td>Amy</td>\n",
    "      <td>Cooze</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv while specifying column names\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'])\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>UID</th>\n",
    "      <th>First Name</th>\n",
    "      <th>Last Name</th>\n",
    "      <th>Age</th>\n",
    "      <th>Pre-Test Score</th>\n",
    "      <th>Post-Test Score</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>NaN</td>\n",
    "      <td>first_name</td>\n",
    "      <td>last_name</td>\n",
    "      <td>age</td>\n",
    "      <td>preTestScore</td>\n",
    "      <td>postTestScore</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>0.0</td>\n",
    "      <td>Jason</td>\n",
    "      <td>Miller</td>\n",
    "      <td>42</td>\n",
    "      <td>4</td>\n",
    "      <td>25,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2</th>\n",
    "      <td>1.0</td>\n",
    "      <td>Molly</td>\n",
    "      <td>Jacobson</td>\n",
    "      <td>52</td>\n",
    "      <td>24</td>\n",
    "      <td>94,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3</th>\n",
    "      <td>2.0</td>\n",
    "      <td>Tina</td>\n",
    "      <td>.</td>\n",
    "      <td>36</td>\n",
    "      <td>31</td>\n",
    "      <td>57</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4</th>\n",
    "      <td>3.0</td>\n",
    "      <td>Jake</td>\n",
    "      <td>Milner</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>5</th>\n",
    "      <td>4.0</td>\n",
    "      <td>Amy</td>\n",
    "      <td>Cooze</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv with setting the index column to UID\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', index_col='UID', names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'])\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>First Name</th>\n",
    "      <th>Last Name</th>\n",
    "      <th>Age</th>\n",
    "      <th>Pre-Test Score</th>\n",
    "      <th>Post-Test Score</th>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>UID</th>\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>NaN</th>\n",
    "      <td>first_name</td>\n",
    "      <td>last_name</td>\n",
    "      <td>age</td>\n",
    "      <td>preTestScore</td>\n",
    "      <td>postTestScore</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>0.0</th>\n",
    "      <td>Jason</td>\n",
    "      <td>Miller</td>\n",
    "      <td>42</td>\n",
    "      <td>4</td>\n",
    "      <td>25,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1.0</th>\n",
    "      <td>Molly</td>\n",
    "      <td>Jacobson</td>\n",
    "      <td>52</td>\n",
    "      <td>24</td>\n",
    "      <td>94,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2.0</th>\n",
    "      <td>Tina</td>\n",
    "      <td>.</td>\n",
    "      <td>36</td>\n",
    "      <td>31</td>\n",
    "      <td>57</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3.0</th>\n",
    "      <td>Jake</td>\n",
    "      <td>Milner</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4.0</th>\n",
    "      <td>Amy</td>\n",
    "      <td>Cooze</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv while setting the index columns to First Name and Last Name\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', index_col=['First Name', 'Last Name'], names=['UID', 'First Name', 'Last Name', 'Age', 'Pre-Test Score', 'Post-Test Score'])\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "      <th>UID</th>\n",
    "      <th>Age</th>\n",
    "      <th>Pre-Test Score</th>\n",
    "      <th>Post-Test Score</th>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>First Name</th>\n",
    "      <th>Last Name</th>\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "      <th></th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>first_name</th>\n",
    "      <th>last_name</th>\n",
    "      <td>NaN</td>\n",
    "      <td>age</td>\n",
    "      <td>preTestScore</td>\n",
    "      <td>postTestScore</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>Jason</th>\n",
    "      <th>Miller</th>\n",
    "      <td>0.0</td>\n",
    "      <td>42</td>\n",
    "      <td>4</td>\n",
    "      <td>25,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>Molly</th>\n",
    "      <th>Jacobson</th>\n",
    "      <td>1.0</td>\n",
    "      <td>52</td>\n",
    "      <td>24</td>\n",
    "      <td>94,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>Tina</th>\n",
    "      <th>.</th>\n",
    "      <td>2.0</td>\n",
    "      <td>36</td>\n",
    "      <td>31</td>\n",
    "      <td>57</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>Jake</th>\n",
    "      <th>Milner</th>\n",
    "      <td>3.0</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>Amy</th>\n",
    "      <th>Cooze</th>\n",
    "      <td>4.0</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv while specifying \".\" as missing values\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', na_values=['.'])\n",
    "pd.isnull(df)\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>Unnamed: 0</th>\n",
    "      <th>first_name</th>\n",
    "      <th>last_name</th>\n",
    "      <th>age</th>\n",
    "      <th>preTestScore</th>\n",
    "      <th>postTestScore</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2</th>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>True</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3</th>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>True</td>\n",
    "      <td>False</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4</th>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>False</td>\n",
    "      <td>True</td>\n",
    "      <td>False</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv while specifying \".\" and \"NA\" as missing values in the Last Name column and \".\" as missing values in Pre-Test Score column\n",
    "\n",
    "\n",
    "```python\n",
    "sentinels = {'Last Name': ['.', 'NA'], 'Pre-Test Score': ['.']}\n",
    "```\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', na_values=sentinels)\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>Unnamed: 0</th>\n",
    "      <th>first_name</th>\n",
    "      <th>last_name</th>\n",
    "      <th>age</th>\n",
    "      <th>preTestScore</th>\n",
    "      <th>postTestScore</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>0</td>\n",
    "      <td>Jason</td>\n",
    "      <td>Miller</td>\n",
    "      <td>42</td>\n",
    "      <td>4</td>\n",
    "      <td>25,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>1</td>\n",
    "      <td>Molly</td>\n",
    "      <td>Jacobson</td>\n",
    "      <td>52</td>\n",
    "      <td>24</td>\n",
    "      <td>94,000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2</th>\n",
    "      <td>2</td>\n",
    "      <td>Tina</td>\n",
    "      <td>.</td>\n",
    "      <td>36</td>\n",
    "      <td>31</td>\n",
    "      <td>57</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3</th>\n",
    "      <td>3</td>\n",
    "      <td>Jake</td>\n",
    "      <td>Milner</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4</th>\n",
    "      <td>4</td>\n",
    "      <td>Amy</td>\n",
    "      <td>Cooze</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv while skipping the top 3 rows\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', na_values=sentinels, skiprows=3)\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>2</th>\n",
    "      <th>Tina</th>\n",
    "      <th>.</th>\n",
    "      <th>36</th>\n",
    "      <th>31</th>\n",
    "      <th>57</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>3</td>\n",
    "      <td>Jake</td>\n",
    "      <td>Milner</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>4</td>\n",
    "      <td>Amy</td>\n",
    "      <td>Cooze</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "\n",
    "\n",
    "### Load a csv while interpreting \",\" in strings around numbers as thousands seperators\n",
    "\n",
    "\n",
    "```python\n",
    "df = pd.read_csv('../data/example.csv', thousands=',')\n",
    "df\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<div>\n",
    "<table border=\"1\" class=\"dataframe\">\n",
    "  <thead>\n",
    "    <tr style=\"text-align: right;\">\n",
    "      <th></th>\n",
    "      <th>Unnamed: 0</th>\n",
    "      <th>first_name</th>\n",
    "      <th>last_name</th>\n",
    "      <th>age</th>\n",
    "      <th>preTestScore</th>\n",
    "      <th>postTestScore</th>\n",
    "    </tr>\n",
    "  </thead>\n",
    "  <tbody>\n",
    "    <tr>\n",
    "      <th>0</th>\n",
    "      <td>0</td>\n",
    "      <td>Jason</td>\n",
    "      <td>Miller</td>\n",
    "      <td>42</td>\n",
    "      <td>4</td>\n",
    "      <td>25000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>1</th>\n",
    "      <td>1</td>\n",
    "      <td>Molly</td>\n",
    "      <td>Jacobson</td>\n",
    "      <td>52</td>\n",
    "      <td>24</td>\n",
    "      <td>94000</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>2</th>\n",
    "      <td>2</td>\n",
    "      <td>Tina</td>\n",
    "      <td>.</td>\n",
    "      <td>36</td>\n",
    "      <td>31</td>\n",
    "      <td>57</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>3</th>\n",
    "      <td>3</td>\n",
    "      <td>Jake</td>\n",
    "      <td>Milner</td>\n",
    "      <td>24</td>\n",
    "      <td>.</td>\n",
    "      <td>62</td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "      <th>4</th>\n",
    "      <td>4</td>\n",
    "      <td>Amy</td>\n",
    "      <td>Cooze</td>\n",
    "      <td>73</td>\n",
    "      <td>.</td>\n",
    "      <td>70</td>\n",
    "    </tr>\n",
    "  </tbody>\n",
    "</table>\n",
    "</div>\n",
    "\n",
    "*Source: Chris Albon, Notes on Data Science, ML, and AI*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 3: Scraping the web and APIs\n",
    "\n",
    "We will need help from two Python packages: **Request** for making the HTTP requests and **BeautifulSoup** for handling HTML.\n",
    "\n",
    "### Beautiful Soup Basic\n",
    "\n",
    "```python\n",
    "# Create a variable with the url\n",
    "url = 'http://chrisralbon.com'\n",
    "\n",
    "# Use requests to get the contents\n",
    "r = requests.get(url)\n",
    "\n",
    "# Get the text of the contents\n",
    "html_content = r.text\n",
    "\n",
    "# Convert the html content into a beautiful soup object\n",
    "soup = BeautifulSoup(html_content, 'lxml')\n",
    "```\n",
    "\n",
    "### Select the website's title\n",
    "\n",
    "\n",
    "```python\n",
    "# View the title tag of the soup object\n",
    "soup.title\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    <title>Chris Albon</title>\n",
    "\n",
    "\n",
    "\n",
    "### Website title tag's string\n",
    "\n",
    "\n",
    "```python\n",
    "# View the string within the title tag\n",
    "soup.title.string\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    'Chris Albon'\n",
    "\n",
    "\n",
    "\n",
    "### First paragraph tag\n",
    "\n",
    "\n",
    "```python\n",
    "# view the paragraph tag of the soup\n",
    "soup.p\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    <p>I am a <a href=\"./pages/about.html\">data scientist originally trained as a quantitative political scientist</a>. I specialize in the technical and organizational aspects of applying data science to political and social issues. </p>\n",
    "\n",
    "\n",
    "\n",
    "### The parent of the title tag\n",
    "\n",
    "\n",
    "```python\n",
    "soup.title.parent.name\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    'head'\n",
    "\n",
    "\n",
    "\n",
    "### The first link tag\n",
    "\n",
    "\n",
    "```python\n",
    "soup.a\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    <a class=\"navbar-brand\" href=\".\">Chris Albon</a>\n",
    "\n",
    "\n",
    "\n",
    "### Find all the link tags and list the first five\n",
    "\n",
    "\n",
    "```python\n",
    "soup.find_all('a')[0:5]\n",
    "```\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    [<a class=\"navbar-brand\" href=\".\">Chris Albon</a>,\n",
    "     <a aria-expanded=\"false\" aria-haspopup=\"true\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\" role=\"button\">About<span class=\"caret\"></span></a>,\n",
    "     <a href=\"./pages/about.html\">About Chris</a>,\n",
    "     <a href=\"https://github.com/chrisalbon\">GitHub</a>,\n",
    "     <a href=\"https://twitter.com/chrisalbon\">Twitter</a>]\n",
    "\n",
    "\n",
    "\n",
    "### The string inside the first paragraph tag\n",
    "\n",
    "\n",
    "```python\n",
    "soup.p.string\n",
    "```\n",
    "\n",
    "### Beautiful Soup in action\n",
    "\n",
    "```python\n",
    "# Create a variable with the URL to this tutorial\n",
    "url = 'http://en.wikipedia.org/wiki/List_of_A_Song_of_Ice_and_Fire_characters'\n",
    "\n",
    "# Scrape the HTML at the url\n",
    "r = requests.get(url)\n",
    "\n",
    "# Turn the HTML into a Beautiful Soup object\n",
    "soup = BeautifulSoup(r.text, \"lxml\")\n",
    "```\n",
    "\n",
    "If we looked at the soup object, we'd see that the names we want are in a heirarchical list. In psuedo-code, it looks like:\n",
    "\n",
    "- class=toclevel-1 span=toctext\n",
    "    - class=toclevel-2 span=toctext CHARACTER NAMES\n",
    "    - class=toclevel-2 span=toctext CHARACTER NAMES\n",
    "    - class=toclevel-2 span=toctext CHARACTER NAMES\n",
    "    - class=toclevel-2 span=toctext CHARACTER NAMES\n",
    "    - class=toclevel-2 span=toctext CHARACTER NAMES\n",
    "\n",
    "To get the CHARACTER NAMES, we are going to need to drill down to grap into loclevel-2 and grab the toctext\n",
    "\n",
    "### Setting up where to put the results\n",
    "\n",
    "\n",
    "```python\n",
    "# Create a variable to score the scraped data in\n",
    "character_name = []\n",
    "```\n",
    "\n",
    "### Drilling down with a forloop\n",
    "\n",
    "\n",
    "```python\n",
    "# for each item in all the toclevel-2 li items\n",
    "# (except the last three because they are not character names),\n",
    "for item in soup.find_all('li',{'class':'toclevel-2'})[:-3]:\n",
    "    # find each span with class=toctext,\n",
    "    for post in item.find_all('span',{'class':'toctext'}):\n",
    "        # add the stripped string of each to character_name, one by one\n",
    "        character_name.append(post.string.strip())\n",
    "```\n",
    "\n",
    "### The results\n",
    "\n",
    "\n",
    "```python\n",
    "# View all the character names\n",
    "character_name\n",
    "```\n",
    "\n",
    "    ['Eddard Stark',\n",
    "     'Catelyn Tully',\n",
    "     'Robb Stark',\n",
    "     'Sansa Stark',\n",
    "     'Arya Stark',\n",
    "     'Bran Stark',\n",
    "     'Rickon Stark',\n",
    "     'Jon Snow',\n",
    "     ...\n",
    "     'Hizdahr zo Loraq',\n",
    "     'Yezzan zo Qaggaz',\n",
    "     'Tycho Nestoris',\n",
    "     'The Waif',\n",
    "     'Septa Unella']\n",
    "\n",
    "\n",
    "\n",
    "*Source: Chris Albon, Notes on Data Science, ML, and AI*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-class Exercise:\n",
    "\n",
    "Reproduce the above results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Fill code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### JSON (and XML)\n",
    "\n",
    "Because HTTP is a protocol for transferring text, the data you request through a web API needs to be serialized into a string format. Often this serialization uses JavaScript Object Notation (JSON). JavaScript objects look quite similar to Python dicts, which makes their string representations easy to interpret:\n",
    "\n",
    "```python\n",
    "     { \"title\" : \"Data Science Book\",\n",
    "       \"author\" : \"Joel Grus\",\n",
    "       \"publicationYear\" : 2014,\n",
    "       \"topics\" : [ \"data\", \"science\", \"data science\"] }\n",
    "```\n",
    "\n",
    "We can parse JSON using Pythonâ€™s json module. In particular, we will use its loads function, which deserializes a string representing a JSON object into a Python object:\n",
    "\n",
    "``` python\n",
    "import json\n",
    "serialized = \"\"\"{ \"title\" : \"Data Science Book\",\n",
    "                   \"author\" : \"Joel Grus\",\n",
    "                   \"publicationYear\" : 2014,\n",
    "                   \"topics\" : [ \"data\", \"science\", \"data science\"] }\"\"\"\n",
    "\n",
    "# parse the JSON to create a Python dict\n",
    "deserialized = json.loads(serialized)\n",
    "if \"data science\" in deserialized[\"topics\"]:\n",
    "    print deserialized\n",
    "```\n",
    "\n",
    "Sometimes an API provider hates you and only provides responses in XML:\n",
    "\n",
    "```xml\n",
    "<Book>\n",
    "    <Title>Data Science Book</Title> \n",
    "    <Author>Joel Grus</Author> \n",
    "    <PublicationYear>2014</PublicationYear> \n",
    "    <Topics>\n",
    "        <Topic>data</Topic> \n",
    "        <Topic>science</Topic> \n",
    "        <Topic>data science</Topic>\n",
    "    </Topics>\n",
    "</Book>\n",
    "```\n",
    "\n",
    "You can use BeautifulSoup to get data from XML similarly to how we used it to get data from HTML; check its documentation for details.\n",
    "\n",
    "*Source: Joel Grus, Data Science from Scratch First Principles with Python*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part 5: Working with Open Weather API\n",
    "\n",
    "https://openweathermap.org/\n",
    "\n",
    "#### How to use API key in API call\n",
    "\n",
    "To get access to weather API you need an API key whatever account you chose from Free to Enterprise.\n",
    "\n",
    "Activation of an API key for Free and Startup plans takes 10 minutes. For other tariff plans it is 10 to 60 minutes.\n",
    "\n",
    "We keep right to not to process API requests without API key.\n",
    "\n",
    "**API call:**\n",
    "\n",
    "    http://api.openweathermap.org/data/2.5/forecast/city?id=524901&APPID={APIKEY}\n",
    "\n",
    "**Parameters:**\n",
    "\n",
    "    APPID {APIKEY} is your unique API key \n",
    "    Example of API call:\n",
    "\n",
    "    api.openweathermap.org/data/2.5/forecast/city?id=524901&APPID=1111111111 \n",
    "\n",
    "#### How to get accurate API response\n",
    "\n",
    "1. Do not send requests more than 1 time per 10 minutes from one device/one API key. Normally the weather is not changing so frequently.\n",
    "2. Use the name of the server as api.openweathermap.org. Please never use the IP address of the server.\n",
    "3. Call API by city ID instead of city name, city coordinates or zip code. In this case you get precise respond exactly for your city.\n",
    "4. Free account has limitation of capacity and data availability. If you do not get respond from server do not try to repeat your request immediately, but only after 10 min. Also we recommend to store your previous request data.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## In-class Exercise\n",
    "\n",
    "Get the 5 day / 3 hour forecast data of three different cities: Bangkok:TH, Tokyo:JP, San Diego:US. Plot out the temperture, min/max temp, humidity of each city. Then, make another plot to comparison average temperature across cities. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Fill code here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# References\n",
    "\n",
    "Python Request\n",
    "--------------\n",
    "\n",
    "This package should be pre-installed with `conda`.\n",
    "\n",
    "Let's get started with some simple examples.\n",
    "\n",
    "\n",
    "Make a Request\n",
    "--------------\n",
    "\n",
    "Making a request with Requests is very simple.\n",
    "\n",
    "Begin by importing the Requests module::\n",
    "\n",
    "    >>> import requests\n",
    "\n",
    "Now, let's try to get a webpage. For this example, let's get GitHub's public\n",
    "timeline::\n",
    "\n",
    "    >>> r = requests.get('https://api.github.com/events')\n",
    "\n",
    "Now, we have a :class:`Response <requests.Response>` object called ``r``. We can\n",
    "get all the information we need from this object.\n",
    "\n",
    "Requests' simple API means that all forms of HTTP request are as obvious. For\n",
    "example, this is how you make an HTTP POST request::\n",
    "\n",
    "    >>> r = requests.post('http://httpbin.org/post', data = {'key':'value'})\n",
    "\n",
    "Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and\n",
    "OPTIONS? These are all just as simple::\n",
    "\n",
    "    >>> r = requests.put('http://httpbin.org/put', data = {'key':'value'})\n",
    "    >>> r = requests.delete('http://httpbin.org/delete')\n",
    "    >>> r = requests.head('http://httpbin.org/get')\n",
    "    >>> r = requests.options('http://httpbin.org/get')\n",
    "\n",
    "That's all well and good, but it's also only the start of what Requests can\n",
    "do.\n",
    "\n",
    "\n",
    "Passing Parameters In URLs\n",
    "--------------------------\n",
    "\n",
    "You often want to send some sort of data in the URL's query string. If\n",
    "you were constructing the URL by hand, this data would be given as key/value\n",
    "pairs in the URL after a question mark, e.g. ``httpbin.org/get?key=val``.\n",
    "Requests allows you to provide these arguments as a dictionary, using the\n",
    "``params`` keyword argument. As an example, if you wanted to pass\n",
    "``key1=value1`` and ``key2=value2`` to ``httpbin.org/get``, you would use the\n",
    "following code::\n",
    "\n",
    "    >>> payload = {'key1': 'value1', 'key2': 'value2'}\n",
    "    >>> r = requests.get('http://httpbin.org/get', params=payload)\n",
    "\n",
    "You can see that the URL has been correctly encoded by printing the URL::\n",
    "\n",
    "    >>> print(r.url)\n",
    "    http://httpbin.org/get?key2=value2&key1=value1\n",
    "\n",
    "Note that any dictionary key whose value is ``None`` will not be added to the\n",
    "URL's query string.\n",
    "\n",
    "You can also pass a list of items as a value::\n",
    "\n",
    "    >>> payload = {'key1': 'value1', 'key2': ['value2', 'value3']}\n",
    "\n",
    "    >>> r = requests.get('http://httpbin.org/get', params=payload)\n",
    "    >>> print(r.url)\n",
    "    http://httpbin.org/get?key1=value1&key2=value2&key2=value3\n",
    "\n",
    "\n",
    "JSON Response Content\n",
    "---------------------\n",
    "\n",
    "There's also a builtin JSON decoder, in case you're dealing with JSON data::\n",
    "\n",
    "    >>> import requests\n",
    "\n",
    "    >>> r = requests.get('https://api.github.com/events')\n",
    "    >>> r.json()\n",
    "    [{u'repository': {u'open_issues': 0, u'url': 'https://github.com/...\n",
    "\n",
    "In case the JSON decoding fails, ``r.json()`` raises an exception. For example, if\n",
    "the response gets a 204 (No Content), or if the response contains invalid JSON,\n",
    "attempting ``r.json()`` raises ``ValueError: No JSON object could be decoded``.\n",
    "\n",
    "It should be noted that the success of the call to ``r.json()`` does **not**\n",
    "indicate the success of the response. Some servers may return a JSON object in a\n",
    "failed response (e.g. error details with HTTP 500). Such JSON will be decoded\n",
    "and returned. To check that a request is successful, use\n",
    "``r.raise_for_status()`` or check ``r.status_code`` is what you expect.\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
